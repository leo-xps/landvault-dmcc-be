// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String             @id @default(cuid())
  email           String?            @unique
  username        String?            @unique
  password        String?
  avatarUrl       String?            @map("avatar_url")
  isGuest         Boolean            @default(false) @map("is_guest")
  createdAt       DateTime?          @default(now()) @map("created_at")
  updatedAt       DateTime?          @updatedAt @map("updated_at")
  guestToken      String?            @map("guest_token")
  verified        Boolean            @default(false)
  RPMModels       RPMModels[]
  RoomMembers     RoomMembers[]
  otp             Otp[]
  AgoraChatUserID AgoraChatUserID[]
  appointments    UserAppointments[]
  role            String?            @default("user")
  AvaturnModels   AvaturnModels[]
  firstName       String?            @map("first_name")
  lastName        String?            @map("last_name")
  countryCode     String?            @map("country_code")
  phoneNumber     String?            @map("phone_number")
  position        String?
  company         String?
  dmccMember      Boolean            @default(false) @map("dmcc_member")
  dmccID          String?            @map("dmcc_id")
  dmccEmail       String?            @map("dmcc_email")
  TagsInUser      TagsInUser[]
  Leaderboard     Leaderboard[]
  Notes           Notes[]

  @@map("users")
}

model Notes {
  id        String    @id @default(cuid())
  title     String?
  data      String?
  metadata  String?
  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  user      Users     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID    String

  @@map("notes")
}

model TagsInUser {
  id        String   @id @default(cuid())
  user      Users    @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID    String   @map("user_id")
  tag       UserTags @relation(fields: [tagID], references: [id], onDelete: Cascade)
  tagID     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("tags_in_user")
}

model UserTags {
  id         String       @id @default(cuid())
  tag        String       @unique
  createdAt  DateTime     @default(now()) @map("created_at")
  TagsInUser TagsInUser[]

  @@map("user_tags")
}

model BlacklistedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())

  @@map("black_listed_token")
}

model RPMModels {
  id          String    @id @default(cuid())
  name        String?
  description String?
  modelID     String
  isDefault   Boolean   @default(false)
  deleted     Boolean   @default(false)
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  user        Users     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID      String

  @@map("rpm_models")
}

model AvaturnModels {
  id          String    @id @default(cuid())
  name        String?
  description String?
  modelID     String
  isDefault   Boolean   @default(false)
  deleted     Boolean   @default(false)
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  user        Users     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID      String

  @@map("avaturn_models")
}

model Rooms {
  id              String        @id @default(cuid())
  roomName        String        @map("room_name")
  roomDescription String?       @map("room_description")
  isPublic        Boolean       @default(false) @map("is_public")
  allowedUsers    String[]      @map("allowed_users")
  deleted         Boolean       @default(false)
  deletedAt       DateTime?     @map("deleted_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  RoomMembers     RoomMembers[]

  @@map("rooms")
}

model RoomMembers {
  id        String   @id @default(cuid())
  Room      Rooms    @relation(fields: [roomID], references: [id], onDelete: Cascade)
  roomID    String   @map("room_id")
  User      Users    @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID    String   @map("user_id")
  role      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("room_members")
}

model AgoraChatUserID {
  id        String   @id @default(cuid())
  User      Users    @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID    String   @map("user_id")
  agoraID   String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("agora_chat_user_id")
}

model ServerAdminTokens {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("server_admin_tokens")
}

model AgoraVideoBlockIDs {
  id        String   @id @default(cuid())
  kickID    String   @unique @map("kick_id")
  blockHash String   @unique @map("block_hash")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("agora_video_block_ids")
}

model AgoraChatRoomIDs {
  id          String    @id @default(cuid())
  roomID      String    @unique @map("room_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  lastCheckAt DateTime? @default(now()) @map("last_check_at")

  @@map("agora_chat_room_ids")
}

model Otp {
  id        String   @id @default(cuid())
  code      Int
  userID    String
  token     String
  createdAt DateTime @default(now()) @map("created_at")

  user Users @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@map("otp")
}

model OtpPass {
  id        String   @id @default(cuid())
  code      Int
  token     String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("otp_pass")
}

model Appointments {
  id              String             @id @default(cuid())
  startTime       DateTime           @map("start_time")
  endTime         DateTime           @map("end_time")
  status          String
  title           String
  code            String             @unique
  roomType        String?            @map("room_type")
  roomEnvironment String?            @map("room_environment")
  location        String?
  description     String?
  isEmailSent     Boolean            @default(false) @map("is_email_sent")
  participants    UserAppointments[]
  guestList       String[]           @map("guest_list")

  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("appointments")
}

model UserAppointments {
  id            String @id @default(cuid())
  userId        String @map("user_id")
  appointmentId String @map("appoinment_id")

  user        Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment Appointments @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("user_appointments")
}

model ShortenedTokens {
  id        String   @id @default(cuid())
  code      String   @unique
  token     String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("shortened_tokens")
}

model ChatHistory {
  id        String   @id @default(cuid())
  roomID    String   @map("room_id")
  data      String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("chat_history")
}

model GameData {
  id        String   @id @default(cuid())
  sourceID  String   @map("source_id")
  data      String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("game_data")
}

model Leaderboard {
  id        String   @id @default(cuid())
  score     Int
  gameID    String   @map("game_id")
  userID    String   @map("user_id")
  nickname  String?
  email     String?
  User      Users    @relation(fields: [userID], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
}
